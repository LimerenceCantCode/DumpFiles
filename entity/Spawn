package limerence.AdditionalTraits.skill.AdditionalTraits;

import codersafterdark.reskillable.api.unlockable.Trait;
import limerence.AdditionalTraits.api.data.MessageCastLine;
import limerence.AdditionalTraits.entity.EntityNatFishHook;
import limerence.AdditionalTraits.util.handlers.PacketHandler;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.util.EnumHand;
import net.minecraft.util.ResourceLocation;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.event.entity.player.PlayerInteractEvent.RightClickEmpty;
import net.minecraftforge.fml.common.FMLCommonHandler;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraftforge.fml.relauncher.Side;
import net.minecraftforge.fml.relauncher.SideOnly;

public class TraitNaturalFisher extends Trait { 
	
	public Class<? extends TraitNaturalFisher> CurrentClass = this.getClass();
	//public static final String TAG_HOOK_OUT = "skillable:NatFisherHook";
	//public static final UUID EMPTY_UUID = UUID.fromString("7d9de2a4-10e4-4488-ad47-56d4398af870");
	
	
	public TraitNaturalFisher() {
		super(new ResourceLocation("AdditionalTraits", "natural_fisher"), 1, 3, 
				new ResourceLocation("AdditionalTraits", "AdditionalTraits"), 
				8, new String[]{"reskillable:attack|1", "reskillable:defense|1", "reskillable:agility|1"});
        if (FMLCommonHandler.instance().getSide().isClient()) {
            MinecraftForge.EVENT_BUS.register(this);
        }
		}
	@SubscribeEvent
	@SideOnly(Side.CLIENT)
	public void onEmptyClick(RightClickEmpty event) {
	EntityPlayer player = event.getEntityPlayer();

	if (!event.isCanceled() && player.isSneaking() && player.getHeldItemMainhand().isEmpty() && event.getHand() == EnumHand.MAIN_HAND && player.isSwingInProgress == false) {
		player.swingArm(event.getHand());
		PacketHandler.instance.sendToServer(new MessageCastLine());
		Decider(player, true);


	}

	}

	//, player.posX, player.posY, player.posZ
	
	
	public static void Decider(final EntityPlayer player, final boolean isClient){
		
		if (isClient == true) {
		EntityNatFishHook FakeHook = new EntityNatFishHook(player.world, player);
		
		player.world.spawnEntity(FakeHook);
		}
		
		
		if (isClient == false) {
			EntityNatFishHook RealHook = new EntityNatFishHook(player.world, player);
			if (RealHook.isAddedToWorld()) 
			RealHook.setDead();	
			else
			player.world.spawnEntity(RealHook);

		}
		
		}
		
	
	

}
	
	


	 //MainHand.getAttributeModifiers(EntityEquipmentSlot.MAINHAND);
	 
	// private boolean shouldStopFishing = false;
	 
	 //public Private(boolean shouldStopFishing) {
		// this.shouldStopFishing = shouldStopFishing;
		 
		//MainHand.onPlayerStoppedUsing(player.world, player, 0);
		 


	//ItemStack NatHook = new ItemStack(ItemInit.NATHOOK);
	//ItemStack DefaultRod = new ItemStack(Items.FISHING_ROD);

	//if (isClient == false) {
	//player.setItemStackToSlot(EntityEquipmentSlot.MAINHAND, NatHook);
	//ItemStack MainHand = player.getHeldItemMainhand();

	//System.out.println("MainHand is " +MainHand);	



	//MainHand.useItemRightClick(player.world, player, EnumHand.MAIN_HAND);
	 
	 
	 
	//	PacketHandler.instance.sendToServer(new MessageCastLine());			
	 
		
	 //, player.posX, player.posY, player.posZ

	 //int lvt_5_1_ = fishEntity.handleHookRetraction();
	
	//, x, y, z
//player.setItemStackToSlot(EntityEquipmentSlot.MAINHAND, NatHook);
//setCurrentHook(realHook);
				
//CurrentHook = realHook;

//ItemStack NatHook = new ItemStack(ItemInit.NATHOOK);		
				



	//&& player.isElytraFlying() || !player.onGround || player.capabilities.isFlying
	


