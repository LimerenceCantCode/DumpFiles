package net.minecraft.item;

import net.minecraft.creativetab.CreativeTabs;
import net.minecraft.enchantment.EnchantmentHelper;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.entity.projectile.EntityFishHook;
import net.minecraft.init.SoundEvents;
import net.minecraft.item.ItemFishingRod.1;
import net.minecraft.stats.StatList;
import net.minecraft.util.ActionResult;
import net.minecraft.util.EnumActionResult;
import net.minecraft.util.EnumHand;
import net.minecraft.util.ResourceLocation;
import net.minecraft.util.SoundCategory;
import net.minecraft.world.World;
import net.minecraftforge.fml.relauncher.Side;
import net.minecraftforge.fml.relauncher.SideOnly;

public class ItemFishingRod extends Item {
	public ItemFishingRod() {
      this.setMaxDamage(64);
      this.setMaxStackSize(1);
      this.setCreativeTab(CreativeTabs.TOOLS);
      this.addPropertyOverride(new ResourceLocation("cast"), new 1(this));
   }

	@SideOnly(Side.CLIENT)
	public boolean isFull3D() {
		return true;
	}

	@SideOnly(Side.CLIENT)
	public boolean shouldRotateAroundWhenRendering() {
		return true;
	}

	public ActionResult<ItemStack> onItemRightClick(World p_77659_1_, EntityPlayer p_77659_2_, EnumHand p_77659_3_) {
		ItemStack lvt_4_1_ = p_77659_2_.getHeldItem(p_77659_3_);
		if (p_77659_2_.fishEntity != null) {
			int lvt_5_1_ = p_77659_2_.fishEntity.handleHookRetraction();
			lvt_4_1_.damageItem(lvt_5_1_, p_77659_2_);
			p_77659_2_.swingArm(p_77659_3_);
			p_77659_1_.playSound((EntityPlayer) null, p_77659_2_.posX, p_77659_2_.posY, p_77659_2_.posZ,
					SoundEvents.ENTITY_BOBBER_RETRIEVE, SoundCategory.NEUTRAL, 1.0F,
					0.4F / (itemRand.nextFloat() * 0.4F + 0.8F));
		} else {
			p_77659_1_.playSound((EntityPlayer) null, p_77659_2_.posX, p_77659_2_.posY, p_77659_2_.posZ,
					SoundEvents.ENTITY_BOBBER_THROW, SoundCategory.NEUTRAL, 0.5F,
					0.4F / (itemRand.nextFloat() * 0.4F + 0.8F));
			if (!p_77659_1_.isRemote) {
				EntityFishHook lvt_5_2_ = new EntityFishHook(p_77659_1_, p_77659_2_);
				int lvt_6_1_ = EnchantmentHelper.getFishingSpeedBonus(lvt_4_1_);
				if (lvt_6_1_ > 0) {
					lvt_5_2_.setLureSpeed(lvt_6_1_);
				}

				int lvt_7_1_ = EnchantmentHelper.getFishingLuckBonus(lvt_4_1_);
				if (lvt_7_1_ > 0) {
					lvt_5_2_.setLuck(lvt_7_1_);
				}

				p_77659_1_.spawnEntity(lvt_5_2_);
			}

			p_77659_2_.swingArm(p_77659_3_);
			p_77659_2_.addStat(StatList.getObjectUseStats(this));
		}

		return new ActionResult(EnumActionResult.SUCCESS, lvt_4_1_);
	}

	public int getItemEnchantability() {
		return 1;
	}
}

package net.minecraft.entity.projectile;

import java.util.Iterator;
import java.util.List;
import net.minecraft.block.BlockLiquid;
import net.minecraft.block.material.Material;
import net.minecraft.block.state.IBlockState;
import net.minecraft.entity.Entity;
import net.minecraft.entity.MoverType;
import net.minecraft.entity.item.EntityItem;
import net.minecraft.entity.item.EntityXPOrb;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.entity.projectile.EntityFishHook.State;
import net.minecraft.init.Items;
import net.minecraft.init.SoundEvents;
import net.minecraft.item.Item;
import net.minecraft.item.ItemFishingRod;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.network.datasync.DataParameter;
import net.minecraft.network.datasync.DataSerializers;
import net.minecraft.network.datasync.EntityDataManager;
import net.minecraft.stats.StatList;
import net.minecraft.util.EnumParticleTypes;
import net.minecraft.util.math.AxisAlignedBB;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.MathHelper;
import net.minecraft.util.math.RayTraceResult;
import net.minecraft.util.math.Vec3d;
import net.minecraft.util.math.RayTraceResult.Type;
import net.minecraft.world.World;
import net.minecraft.world.WorldServer;
import net.minecraft.world.storage.loot.LootTableList;
import net.minecraft.world.storage.loot.LootContext.Builder;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.event.entity.player.ItemFishedEvent;
import net.minecraftforge.fml.relauncher.Side;
import net.minecraftforge.fml.relauncher.SideOnly;

public class EntityFishHook extends Entity {
	private static final DataParameter<Integer> DATA_HOOKED_ENTITY;
	private boolean inGround;
	private int ticksInGround;
	private EntityPlayer angler;
	private int ticksInAir;
	private int ticksCatchable;
	private int ticksCaughtDelay;
	private int ticksCatchableDelay;
	private float fishApproachAngle;
	public Entity caughtEntity;
	private State currentState;
	private int luck;
	private int lureSpeed;

	@SideOnly(Side.CLIENT)
	public EntityFishHook(World p_i47290_1_, EntityPlayer p_i47290_2_, double p_i47290_3_, double p_i47290_5_,
			double p_i47290_7_) {
		super(p_i47290_1_);
		this.currentState = State.FLYING;
		this.init(p_i47290_2_);
		this.setPosition(p_i47290_3_, p_i47290_5_, p_i47290_7_);
		this.prevPosX = this.posX;
		this.prevPosY = this.posY;
		this.prevPosZ = this.posZ;
	}

	public EntityFishHook(World p_i1766_1_, EntityPlayer p_i1766_2_) {
		super(p_i1766_1_);
		this.currentState = State.FLYING;
		this.init(p_i1766_2_);
		this.shoot();
	}

	private void init(EntityPlayer p_190626_1_) {
		this.setSize(0.25F, 0.25F);
		this.ignoreFrustumCheck = true;
		this.angler = p_190626_1_;
		this.angler.fishEntity = this;
	}

	public void setLureSpeed(int p_191516_1_) {
		this.lureSpeed = p_191516_1_;
	}

	public void setLuck(int p_191517_1_) {
		this.luck = p_191517_1_;
	}

	private void shoot() {
		float f = this.angler.prevRotationPitch + (this.angler.rotationPitch - this.angler.prevRotationPitch);
		float f1 = this.angler.prevRotationYaw + (this.angler.rotationYaw - this.angler.prevRotationYaw);
		float f2 = MathHelper.cos(-f1 * 0.017453292F - 3.1415927F);
		float f3 = MathHelper.sin(-f1 * 0.017453292F - 3.1415927F);
		float f4 = -MathHelper.cos(-f * 0.017453292F);
		float f5 = MathHelper.sin(-f * 0.017453292F);
		double d0 = this.angler.prevPosX + (this.angler.posX - this.angler.prevPosX) - (double) f3 * 0.3D;
		double d1 = this.angler.prevPosY + (this.angler.posY - this.angler.prevPosY)
				+ (double) this.angler.getEyeHeight();
		double d2 = this.angler.prevPosZ + (this.angler.posZ - this.angler.prevPosZ) - (double) f2 * 0.3D;
		this.setLocationAndAngles(d0, d1, d2, f1, f);
		this.motionX = (double) (-f3);
		this.motionY = (double) MathHelper.clamp(-(f5 / f4), -5.0F, 5.0F);
		this.motionZ = (double) (-f2);
		float f6 = MathHelper
				.sqrt(this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ);
		this.motionX *= 0.6D / (double) f6 + 0.5D + this.rand.nextGaussian() * 0.0045D;
		this.motionY *= 0.6D / (double) f6 + 0.5D + this.rand.nextGaussian() * 0.0045D;
		this.motionZ *= 0.6D / (double) f6 + 0.5D + this.rand.nextGaussian() * 0.0045D;
		float f7 = MathHelper.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
		this.rotationYaw = (float) (MathHelper.atan2(this.motionX, this.motionZ) * 57.29577951308232D);
		this.rotationPitch = (float) (MathHelper.atan2(this.motionY, (double) f7) * 57.29577951308232D);
		this.prevRotationYaw = this.rotationYaw;
		this.prevRotationPitch = this.rotationPitch;
	}

	protected void entityInit() {
		this.getDataManager().register(DATA_HOOKED_ENTITY, 0);
	}

	public void notifyDataManagerChange(DataParameter<?> p_184206_1_) {
		if (DATA_HOOKED_ENTITY.equals(p_184206_1_)) {
			int i = (Integer) this.getDataManager().get(DATA_HOOKED_ENTITY);
			this.caughtEntity = i > 0 ? this.world.getEntityByID(i - 1) : null;
		}

		super.notifyDataManagerChange(p_184206_1_);
	}

	@SideOnly(Side.CLIENT)
	public boolean isInRangeToRenderDist(double p_70112_1_) {
		double d0 = 64.0D;
		return p_70112_1_ < 4096.0D;
	}

	@SideOnly(Side.CLIENT)
	public void setPositionAndRotationDirect(double p_180426_1_, double p_180426_3_, double p_180426_5_,
			float p_180426_7_, float p_180426_8_, int p_180426_9_, boolean p_180426_10_) {
	}

	public void onUpdate() {
		super.onUpdate();
		if (this.angler == null) {
			this.setDead();
		} else if (this.world.isRemote || !this.shouldStopFishing()) {
			if (this.inGround) {
				++this.ticksInGround;
				if (this.ticksInGround >= 1200) {
					this.setDead();
					return;
				}
			}

			float f = 0.0F;
			BlockPos blockpos = new BlockPos(this);
			IBlockState iblockstate = this.world.getBlockState(blockpos);
			if (iblockstate.getMaterial() == Material.WATER) {
				f = BlockLiquid.getBlockLiquidHeight(iblockstate, this.world, blockpos);
			}

			double d1;
			if (this.currentState == State.FLYING) {
				if (this.caughtEntity != null) {
					this.motionX = 0.0D;
					this.motionY = 0.0D;
					this.motionZ = 0.0D;
					this.currentState = State.HOOKED_IN_ENTITY;
					return;
				}

				if (f > 0.0F) {
					this.motionX *= 0.3D;
					this.motionY *= 0.2D;
					this.motionZ *= 0.3D;
					this.currentState = State.BOBBING;
					return;
				}

				if (!this.world.isRemote) {
					this.checkCollision();
				}

				if (!this.inGround && !this.onGround && !this.collidedHorizontally) {
					++this.ticksInAir;
				} else {
					this.ticksInAir = 0;
					this.motionX = 0.0D;
					this.motionY = 0.0D;
					this.motionZ = 0.0D;
				}
			} else {
				if (this.currentState == State.HOOKED_IN_ENTITY) {
					if (this.caughtEntity != null) {
						if (this.caughtEntity.isDead) {
							this.caughtEntity = null;
							this.currentState = State.FLYING;
						} else {
							this.posX = this.caughtEntity.posX;
							d1 = (double) this.caughtEntity.height;
							this.posY = this.caughtEntity.getEntityBoundingBox().minY + d1 * 0.8D;
							this.posZ = this.caughtEntity.posZ;
							this.setPosition(this.posX, this.posY, this.posZ);
						}
					}

					return;
				}

				if (this.currentState == State.BOBBING) {
					this.motionX *= 0.9D;
					this.motionZ *= 0.9D;
					d1 = this.posY + this.motionY - (double) blockpos.getY() - (double) f;
					if (Math.abs(d1) < 0.01D) {
						d1 += Math.signum(d1) * 0.1D;
					}

					this.motionY -= d1 * (double) this.rand.nextFloat() * 0.2D;
					if (!this.world.isRemote && f > 0.0F) {
						this.catchingFish(blockpos);
					}
				}
			}

			if (iblockstate.getMaterial() != Material.WATER) {
				this.motionY -= 0.03D;
			}

			this.move(MoverType.SELF, this.motionX, this.motionY, this.motionZ);
			this.updateRotation();
			d1 = 0.92D;
			this.motionX *= 0.92D;
			this.motionY *= 0.92D;
			this.motionZ *= 0.92D;
			this.setPosition(this.posX, this.posY, this.posZ);
		}

	}

	private boolean shouldStopFishing() {
		ItemStack itemstack = this.angler.getHeldItemMainhand();
		ItemStack itemstack1 = this.angler.getHeldItemOffhand();
		boolean flag = itemstack.getItem() instanceof ItemFishingRod;
		boolean flag1 = itemstack1.getItem() instanceof ItemFishingRod;
		if (!this.angler.isDead && this.angler.isEntityAlive() && (flag || flag1)
				&& this.getDistanceSq(this.angler) <= 1024.0D) {
			return false;
		} else {
			this.setDead();
			return true;
		}
	}

	private void updateRotation() {
		float f = MathHelper.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
		this.rotationYaw = (float) (MathHelper.atan2(this.motionX, this.motionZ) * 57.29577951308232D);

		for (this.rotationPitch = (float) (MathHelper.atan2(this.motionY, (double) f)
				* 57.29577951308232D); this.rotationPitch
						- this.prevRotationPitch < -180.0F; this.prevRotationPitch -= 360.0F) {
			;
		}

		while (this.rotationPitch - this.prevRotationPitch >= 180.0F) {
			this.prevRotationPitch += 360.0F;
		}

		while (this.rotationYaw - this.prevRotationYaw < -180.0F) {
			this.prevRotationYaw -= 360.0F;
		}

		while (this.rotationYaw - this.prevRotationYaw >= 180.0F) {
			this.prevRotationYaw += 360.0F;
		}

		this.rotationPitch = this.prevRotationPitch + (this.rotationPitch - this.prevRotationPitch) * 0.2F;
		this.rotationYaw = this.prevRotationYaw + (this.rotationYaw - this.prevRotationYaw) * 0.2F;
	}

	private void checkCollision() {
		Vec3d vec3d = new Vec3d(this.posX, this.posY, this.posZ);
		Vec3d vec3d1 = new Vec3d(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
		RayTraceResult raytraceresult = this.world.rayTraceBlocks(vec3d, vec3d1, false, true, false);
		vec3d = new Vec3d(this.posX, this.posY, this.posZ);
		vec3d1 = new Vec3d(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
		if (raytraceresult != null) {
			vec3d1 = new Vec3d(raytraceresult.hitVec.x, raytraceresult.hitVec.y, raytraceresult.hitVec.z);
		}

		Entity entity = null;
		List<Entity> list = this.world.getEntitiesWithinAABBExcludingEntity(this,
				this.getEntityBoundingBox().expand(this.motionX, this.motionY, this.motionZ).grow(1.0D));
		double d0 = 0.0D;
		Iterator var8 = list.iterator();

		while (true) {
			Entity entity1;
			double d1;
			do {
				RayTraceResult raytraceresult1;
				do {
					do {
						do {
							if (!var8.hasNext()) {
								if (entity != null) {
									raytraceresult = new RayTraceResult(entity);
								}

								if (raytraceresult != null && raytraceresult.typeOfHit != Type.MISS) {
									if (raytraceresult.typeOfHit == Type.ENTITY) {
										this.caughtEntity = raytraceresult.entityHit;
										this.setHookedEntity();
									} else {
										this.inGround = true;
									}
								}

								return;
							}

							entity1 = (Entity) var8.next();
						} while (!this.canBeHooked(entity1));
					} while (entity1 == this.angler && this.ticksInAir < 5);

					AxisAlignedBB axisalignedbb = entity1.getEntityBoundingBox().grow(0.30000001192092896D);
					raytraceresult1 = axisalignedbb.calculateIntercept(vec3d, vec3d1);
				} while (raytraceresult1 == null);

				d1 = vec3d.squareDistanceTo(raytraceresult1.hitVec);
			} while (d1 >= d0 && d0 != 0.0D);

			entity = entity1;
			d0 = d1;
		}
	}

	private void setHookedEntity() {
		this.getDataManager().set(DATA_HOOKED_ENTITY, this.caughtEntity.getEntityId() + 1);
	}

	private void catchingFish(BlockPos p_190621_1_) {
		WorldServer worldserver = (WorldServer) this.world;
		int i = 1;
		BlockPos blockpos = p_190621_1_.up();
		if (this.rand.nextFloat() < 0.25F && this.world.isRainingAt(blockpos)) {
			++i;
		}

		if (this.rand.nextFloat() < 0.5F && !this.world.canSeeSky(blockpos)) {
			--i;
		}

		if (this.ticksCatchable > 0) {
			--this.ticksCatchable;
			if (this.ticksCatchable <= 0) {
				this.ticksCaughtDelay = 0;
				this.ticksCatchableDelay = 0;
			} else {
				this.motionY -= 0.2D * (double) this.rand.nextFloat() * (double) this.rand.nextFloat();
			}
		} else {
			float f5;
			float f6;
			float f7;
			double d4;
			double d5;
			double d6;
			IBlockState state;
			if (this.ticksCatchableDelay > 0) {
				this.ticksCatchableDelay -= i;
				if (this.ticksCatchableDelay > 0) {
					this.fishApproachAngle = (float) ((double) this.fishApproachAngle
							+ this.rand.nextGaussian() * 4.0D);
					f5 = this.fishApproachAngle * 0.017453292F;
					f6 = MathHelper.sin(f5);
					f7 = MathHelper.cos(f5);
					d4 = this.posX + (double) (f6 * (float) this.ticksCatchableDelay * 0.1F);
					d5 = (double) ((float) MathHelper.floor(this.getEntityBoundingBox().minY) + 1.0F);
					d6 = this.posZ + (double) (f7 * (float) this.ticksCatchableDelay * 0.1F);
					state = worldserver.getBlockState(new BlockPos(d4, d5 - 1.0D, d6));
					if (state.getMaterial() == Material.WATER) {
						if (this.rand.nextFloat() < 0.15F) {
							worldserver.spawnParticle(EnumParticleTypes.WATER_BUBBLE, d4, d5 - 0.10000000149011612D, d6,
									1, (double) f6, 0.1D, (double) f7, 0.0D, new int[0]);
						}

						float f3 = f6 * 0.04F;
						float f4 = f7 * 0.04F;
						worldserver.spawnParticle(EnumParticleTypes.WATER_WAKE, d4, d5, d6, 0, (double) f4, 0.01D,
								(double) (-f3), 1.0D, new int[0]);
						worldserver.spawnParticle(EnumParticleTypes.WATER_WAKE, d4, d5, d6, 0, (double) (-f4), 0.01D,
								(double) f3, 1.0D, new int[0]);
					}
				} else {
					this.motionY = (double) (-0.4F * MathHelper.nextFloat(this.rand, 0.6F, 1.0F));
					this.playSound(SoundEvents.ENTITY_BOBBER_SPLASH, 0.25F,
							1.0F + (this.rand.nextFloat() - this.rand.nextFloat()) * 0.4F);
					double d3 = this.getEntityBoundingBox().minY + 0.5D;
					worldserver.spawnParticle(EnumParticleTypes.WATER_BUBBLE, this.posX, d3, this.posZ,
							(int) (1.0F + this.width * 20.0F), (double) this.width, 0.0D, (double) this.width,
							0.20000000298023224D, new int[0]);
					worldserver.spawnParticle(EnumParticleTypes.WATER_WAKE, this.posX, d3, this.posZ,
							(int) (1.0F + this.width * 20.0F), (double) this.width, 0.0D, (double) this.width,
							0.20000000298023224D, new int[0]);
					this.ticksCatchable = MathHelper.getInt(this.rand, 20, 40);
				}
			} else if (this.ticksCaughtDelay > 0) {
				this.ticksCaughtDelay -= i;
				f5 = 0.15F;
				if (this.ticksCaughtDelay < 20) {
					f5 = (float) ((double) f5 + (double) (20 - this.ticksCaughtDelay) * 0.05D);
				} else if (this.ticksCaughtDelay < 40) {
					f5 = (float) ((double) f5 + (double) (40 - this.ticksCaughtDelay) * 0.02D);
				} else if (this.ticksCaughtDelay < 60) {
					f5 = (float) ((double) f5 + (double) (60 - this.ticksCaughtDelay) * 0.01D);
				}

				if (this.rand.nextFloat() < f5) {
					f6 = MathHelper.nextFloat(this.rand, 0.0F, 360.0F) * 0.017453292F;
					f7 = MathHelper.nextFloat(this.rand, 25.0F, 60.0F);
					d4 = this.posX + (double) (MathHelper.sin(f6) * f7 * 0.1F);
					d5 = (double) ((float) MathHelper.floor(this.getEntityBoundingBox().minY) + 1.0F);
					d6 = this.posZ + (double) (MathHelper.cos(f6) * f7 * 0.1F);
					state = worldserver.getBlockState(new BlockPos((int) d4, (int) d5 - 1, (int) d6));
					if (state.getMaterial() == Material.WATER) {
						worldserver.spawnParticle(EnumParticleTypes.WATER_SPLASH, d4, d5, d6, 2 + this.rand.nextInt(2),
								0.10000000149011612D, 0.0D, 0.10000000149011612D, 0.0D, new int[0]);
					}
				}

				if (this.ticksCaughtDelay <= 0) {
					this.fishApproachAngle = MathHelper.nextFloat(this.rand, 0.0F, 360.0F);
					this.ticksCatchableDelay = MathHelper.getInt(this.rand, 20, 80);
				}
			} else {
				this.ticksCaughtDelay = MathHelper.getInt(this.rand, 100, 600);
				this.ticksCaughtDelay -= this.lureSpeed * 20 * 5;
			}
		}

	}

	protected boolean canBeHooked(Entity p_189739_1_) {
		return p_189739_1_.canBeCollidedWith() || p_189739_1_ instanceof EntityItem;
	}

	public void writeEntityToNBT(NBTTagCompound p_70014_1_) {
	}

	public void readEntityFromNBT(NBTTagCompound p_70037_1_) {
	}

	public int handleHookRetraction() {
		if (!this.world.isRemote && this.angler != null) {
			int i = 0;
			ItemFishedEvent event = null;
			if (this.caughtEntity != null) {
				this.bringInHookedEntity();
				this.world.setEntityState(this, (byte) 31);
				i = this.caughtEntity instanceof EntityItem ? 3 : 5;
			} else if (this.ticksCatchable > 0) {
				Builder lootcontext$builder = new Builder((WorldServer) this.world);
				lootcontext$builder.withLuck((float) this.luck + this.angler.getLuck()).withPlayer(this.angler)
						.withLootedEntity(this);
				List<ItemStack> result = this.world.getLootTableManager()
						.getLootTableFromLocation(LootTableList.GAMEPLAY_FISHING)
						.generateLootForPools(this.rand, lootcontext$builder.build());
				event = new ItemFishedEvent(result, this.inGround ? 2 : 1, this);
				MinecraftForge.EVENT_BUS.post(event);
				if (event.isCanceled()) {
					this.setDead();
					return event.getRodDamage();
				}

				Iterator var5 = result.iterator();

				label50 : while (true) {
					Item item;
					do {
						if (!var5.hasNext()) {
							i = 1;
							break label50;
						}

						ItemStack itemstack = (ItemStack) var5.next();
						EntityItem entityitem = new EntityItem(this.world, this.posX, this.posY, this.posZ, itemstack);
						double d0 = this.angler.posX - this.posX;
						double d1 = this.angler.posY - this.posY;
						double d2 = this.angler.posZ - this.posZ;
						double d3 = (double) MathHelper.sqrt(d0 * d0 + d1 * d1 + d2 * d2);
						double d4 = 0.1D;
						entityitem.motionX = d0 * 0.1D;
						entityitem.motionY = d1 * 0.1D + (double) MathHelper.sqrt(d3) * 0.08D;
						entityitem.motionZ = d2 * 0.1D;
						this.world.spawnEntity(entityitem);
						this.angler.world.spawnEntity(new EntityXPOrb(this.angler.world, this.angler.posX,
								this.angler.posY + 0.5D, this.angler.posZ + 0.5D, this.rand.nextInt(6) + 1));
						item = itemstack.getItem();
					} while (item != Items.FISH && item != Items.COOKED_FISH);

					this.angler.addStat(StatList.FISH_CAUGHT, 1);
				}
			}

			if (this.inGround) {
				i = 2;
			}

			this.setDead();
			return event == null ? i : event.getRodDamage();
		} else {
			return 0;
		}
	}

	@SideOnly(Side.CLIENT)
	public void handleStatusUpdate(byte p_70103_1_) {
		if (p_70103_1_ == 31 && this.world.isRemote && this.caughtEntity instanceof EntityPlayer
				&& ((EntityPlayer) this.caughtEntity).isUser()) {
			this.bringInHookedEntity();
		}

		super.handleStatusUpdate(p_70103_1_);
	}

	protected void bringInHookedEntity() {
		if (this.angler != null) {
			double d0 = this.angler.posX - this.posX;
			double d1 = this.angler.posY - this.posY;
			double d2 = this.angler.posZ - this.posZ;
			double d3 = 0.1D;
			this.caughtEntity.motionX += d0 * 0.1D;
			this.caughtEntity.motionY += d1 * 0.1D;
			this.caughtEntity.motionZ += d2 * 0.1D;
		}

	}

	protected boolean canTriggerWalking() {
		return false;
	}

	public void setDead() {
		super.setDead();
		if (this.angler != null) {
			this.angler.fishEntity = null;
		}

	}

	public EntityPlayer getAngler() {
		return this.angler;
	}

	static {
		DATA_HOOKED_ENTITY = EntityDataManager.createKey(EntityFishHook.class, DataSerializers.VARINT);
	}
}

